
- mssql
  - python packages:
    - cTDS
        con = ctds.connect('localhost', user='sa', password='dbapix1!', database='dbapix')
      
    - pyodbc
  - running a test server:
    https://hub.docker.com/_/microsoft-mssql-server

    docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=dbapix1!' -p 127.0.0.1:1433:1433 -d mcr.microsoft.com/mssql/server:2017-CU8-ubuntu


- Standardize a few more things:
    
    con.isolation_level
    con.transaction_status

- Pull in con.tables(), con.columns(table), etc., from mmtransfer.

- Engine/Connection.migrate(table, functions)

- Stored procedures.
        
    proc = Procedure(base_name, contents, language='sql')
    name = base_name + '_' + md5(contents) + language
    proc(con, params, create_if_missing=True) -> result

- Postgres events.
    - Base class it text events.
    - Mixin or serializer='json' brings JSON events.
    - Mixin brings a backfill table and stored procedures.
        We could have a base implementation that has a dbapix_notifies table.

- Our own type registering system.
    - dbx.SQL('literal SQL')

- Sqlite and Psycopg2 don't touch %s if args is None, but our handling of it
  means that they might.

  >>> cur.execute("select '%s'")
  >>> list(cur)
  [('%s',)]
  >>> cur.execute("select '%s'", [1])
  >>> list(cur)
  [('1',)]
  >>> cur.execute("select '%s'", [])
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  IndexError: list index out of range

- `get_connection` vs `connect` is not clear, alternatives include:
    - `take_connection` vs `borrow_connection`
    - `auto_connection()`
    - `auto_connect()`
    - `connection_context()`
    - a method vs calling the engine:
        with engine() as con:
            pass
    - calling the pool:
        with engine.pool() as con:
            pass
    x a method vs a direct context:
        # Note that this can't work as I don't think we can really track
        # the state on this to be sure we close it without doing shit like
        # using sys._getframe to maintain it.
        with engine as con:
            pass

